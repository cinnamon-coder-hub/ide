#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  if [ -z "${2}" ]
  then
    echo "setup help"
  fi
  exit
fi

if [ -n "${DEVON_IDE_TRACE}" ]; then set -vx; fi
# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions

# $1: optional setup
function doSetup() {  
  if [ ! "$DOCKER_EDITION" = "DOCKERDESKTOP" ]
  then
    echo "Rancher Desktop set as option"
    if [[ $(uname -r | grep -i microsoft) ]]
    then 
      echo "It seems that you are running the setup from inside a WSL shell."
      echo "Please use git-bash for that purpose. Otherwise your OS will be interpreted as Linux"
    else
      if doIsRancherInstalled 
      then
        doIsWindows 
        queryWin=$?
        if [ "${1}" != "silent" ] && ! doIsQuiet
        then
          #give the User the installation location when using linux or mac
          if [ queryWin != 0 ]
          then
            doEcho "Rancher Desktop is already installed at $(command -v devon docker)"
          else
            doEcho "Rancher Desktop is already installed"
          fi
        fi
      else
        doRequireNotBatch
        latestversion=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/rancher-sandbox/rancher-desktop/releases/latest | sed 's/.*\([0-9]\.[0-9]\.[0-9]\).*/\1/')
        previousversion="1.2.1"
        if [[ "$latestversion" =~ ^[0-9]\.[0-9].[0-9]$ ]] 
        then
          if [ "$latestversion" > "$previousversion" ]
          then
            echo "setting RANCHER_VERSION"
            RANCHER_VERSION=$latestversion
            echo "RANCHER_VERSION is $RANCHER_VERSION"
          fi
        fi
        local version="${RANCHER_VERSION:-1.2.1}"
        local code
        #to download Rancher Desktop we need a bit more work compared to Docker-Desktop 
        #as the download-URL isn't well structured
        if doIsWindows
        then
          arch="-"
          ext="windows"
          os="windows"
        elif doIsMacOs
        then
          ext="mac"
          os="mac"
          #options that work with mac OS
          #arch="arm64"
          #arch="x86_64"
          arch="$(uname -m)"
        else
          arch="-"
          ext="other"
          os="linux"
        fi
        doDownload "-" "" "rancher" "${version}" "" "${arch}" "${os}" "${arch}" "${ext}"
        if doIsWindows
        then
          doEcho "Installing Rancher Desktop for Windows..."
          doRunCommand "${DEVON_DOWNLOAD_DIR}/rancher-${version}-Rancher.Desktop.Setup..exe" 
        elif doIsMacOs
        then
          doEcho "Installing Rancher Desktop for MacOS..."
          local mount_dir="${DEVON_IDE_HOME}/updates/volume"
          mkdir -p "${mount_dir}"
          doRunCommand "hdiutil attach -quiet -nobrowse -mountpoint '${mount_dir}' '${DEVON_DOWNLOAD_DIR}/rancher-${version}-Rancher.Desktop-.dmg'"
          doRunCommand "cp -a '${mount_dir}'/*.app /Applications/"
          doRunCommand "hdiutil detach -force '${mount_dir}'"
        fi
        mkdir "${DEVON_IDE_HOME}"/software/rancher; touch rancher-install-info.txt; echo "Rancher Desktop installed globally" > install-info.txt
        ls "${DEVON_IDE_HOME}"/software/rancher
        read -r -p "Rancher Desktop has been installed. Please read https://github.com/devonfw/ide/blob/master/documentation/docker.asciidoc#setup for enabling kubernetes and further important details. Press enter to continue" answer
      fi
    fi
  else
    if doIsDockerInstalled 
    then
      if [ "${1}" != "silent" ] && ! doIsQuiet
      then
        doEcho "docker is already installed at $(command -v docker)"
        docker version
      fi
    else
      doRequireNotBatch
      local version="${DOCKER_VERSION:-stable}"
      local code
      if doIsWindows
      then
        code="Docker%20Desktop%20Installer"
      elif doIsMacOs
      then
        code="Docker"
      else
        doFail "Sorry, docker-installation support is not yet implemented for your OS. Please use Rancher Desktop instead, or install manually or help devonfw-ide to support it for your OS by contributing a pull-request."
      fi
      doDownload "-" "" "docker" "${version}" "" "${code}"
      if doIsWindows
      then
          doEcho "installing Docker Desktop for Windows..."
        doRunCommand "${DEVON_DOWNLOAD_DIR}/docker-stable-win.exe"
      elif doIsMacOs
      then
          doEcho "installing Docker Desktop for MacOS..."
        local mount_dir="${DEVON_IDE_HOME}/updates/volume"
        mkdir -p "${mount_dir}"
        doRunCommand "hdiutil attach -quiet -nobrowse -mountpoint '${mount_dir}' '${DEVON_DOWNLOAD_DIR}/Docker.dmg'"
        doRunCommand "cp -a '${mount_dir}'/*.app /Applications/"
        doRunCommand "hdiutil detach -force '${mount_dir}'"
      fi
      read -r -p "Docker Desktop has been installed. Please read https://github.com/devonfw/ide/blob/master/documentation/docker.asciidoc#setup for enabling kubernetes and further important details. Press enter to continue" answer
    fi
  fi
}


# Call Docker with specified arguments.   
function doRun() {
  doSetup silent
  doEcho "Running: docker ${*}"
  docker "${@}"
}

# OS independent check if docker is installed.
function doIsDockerInstalled() {
  if command -v docker &> /dev/null
  then 
    return
  else
    return 255
  fi
}

#OS independent check if Rancher Desktop is installed.
function doIsRancherInstalled() {
    if doIsWindows
    then
      touch tmp-res-install-query rd-install-test.ps1
      echo 'if($env:Path -like "*Rancher Desktop*") { set-content .\tmp-res-install-query "installed"} else {set-content .\tmp-res-install-query "not"}' > rd-install-test.ps1
      powershell.exe -Command ".\rd-install-test.ps1"
      installvar=$(awk 'NR=1' tmp-res-install-query)
      rm tmp-res-install-query rd-install-test.ps1
      if [ ${installvar}="installed" ]
      then
        return 
      else
        return 255
      fi
    else
      if command -v rancher-desktop &> /dev/null
      then
        return
      else
        return 255
      fi
    fi
}

# CLI
case ${1} in 
"help" | "-h")
  echo "Setup docker."
  echo
  echo "Arguments:"
  echo " setup                    setup docker on your machine (global installation)."
  echo " «args»                   call docker with the specified arguments. Call docker help for details or use docker directly as preferred."
  echo 
;;
"setup" | "s" | "")
  doSetup setup "${2}"
;;
*)
   doRun "${@}"
;;
esac
