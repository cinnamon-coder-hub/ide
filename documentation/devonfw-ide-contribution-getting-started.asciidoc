:toc:
toc::[]

= Getting started as developer contributing to devonfw-ide

== Installation
To start developing devonfw-ide, you must first install it on your computer.
Therefore simply follow the link:setup.asciidoc[setup] guide.

== Contribution
To begin, read through the https://github.com/devonfw/.github/blob/master/CONTRIBUTING.asciidoc[Contribution Guidelines], which you should be sure to follow.
First steps regarding forks or cloning of repos and creating branches, as well as some git commands, https://github.com/firstcontributions/first-contributions[can be found here].
Clone the https://github.com/devonfw/ide[project IDE] at the beginning.
For further development and testing, it is recommended to copy the modified scripts into your devonfw-ide installation.
Alternatively, the scripts can be adapted in the installation folder and then committed to the project.

=== ShellCheck

To improve the code quality the https://github.com/koalaman/shellcheck/[ShellCheck] is used for devon-ide.
There is a GitHub action _CI build PR_ for this. If this fails at the PR, you can find the error messages in the big logfile under _Build project with Maven_.
For example, these look like this:

```
Running test #2: test-shellcheck

In scripts/functions line 659:
    doUnzip ${1} ${target_dir}
            ^--^ SC2086: Double quote to prevent globbing and word splitting.
                 ^-----------^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
    doUnzip "${1}" "${target_dir}"

For more information:
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...

```

Further explanations for ShellCheck errors can be found in the https://www.shellcheck.net/wiki/[ShellCheck Wiki].
Own code can also be tested with the https://www.shellcheck.net/[Online ShellCheck].
ShellCheck can also be run on the local development environment. To do this, ShellCheck (https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip[win], https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz[mac]) can be extracted to the program directory. In the resource folder of the project (`scripts/src/main/resources`) the following command can now be executed for Windows

```
& "C:\Program Files\shellcheck-stable\shellcheck.exe" {scriptname}
```

or for Mac / Linux
```
shellcheck -x -e SC2181 setup scripts/devon scripts/environment-project scripts/functions scripts/command/*
```

== Create a new commandlet

=== IDE-Mirrors
Many programs have a download link that depends on the operating system. 

For a new tool create a folder in https://github.com/devonfw/ide-mirrors[ide-mirrors] repository with its name containing the following files:

* `urls` contains the download URL(s) that typically contain placeholders like `${ext}` for extension, `${os}` for operating-system, `${arch}` for CPU architecture, or `${code}` for commandlet specific things. The file can hold multiple URLs - one per line. This is used if multiple https://en.wikipedia.org/wiki/Mirror_site[mirrors] are available so the load gets distributed. Therefore devonfw-ide will shuffle the URLs into random order and then try them sequentially so if one URL does not work (e.g. mirror unavailable) it will try the next one.
* `ext-mapping` contains the mapping from operating system (OS) to the according file extension filled into the `${ext}` placeholder of the download for that OS.
* `os-mapping` contains the remapping from OS to the value filled into the `${os}` placeholder of the URL. So you can e.g. remap `windows=win` or `mac=darwin` in case the download URLs do not follow common practices. You can even omit this file to fall back to the default https://github.com/devonfw/ide-mirrors/blob/master/os-mappings[os-mappings].
* `arch-mapping` contains the remapping from architecture to the value filled into the `${arch}` placeholder of the URL. So you can e.g. remap `aarch64=arm64` or `x86_64=x64` in case the download URLs do not follow common practices. Simply omit this file if not needed.
* `versions` in very special cases, you can create separate configurations in sub-folders for specific versions or version-ranges. Here you can specify a folder-name followed by a less-sign (`<`) and a version number to specify that if the version to install is less than this given version, the configuration will be read from that specified folder. The lines are processed top-down where the first match applies. An example can be found https://github.com/devonfw/ide-mirrors/blob/master/java/versions[here].

It is important that the line endings of all files are UNIX `\n`.

=== Commandlet
Use an existing commandlet like https://github.com/devonfw/ide/blob/master/scripts/src/main/resources/scripts/command/helm[HELM] as a reference.
Create a file with the name of the tool and put it in the folder https://github.com/devonfw/ide/tree/master/scripts/src/main/resources/scripts/command[scripts/command].
The first part of the script contains the autocompletion, which should return the available parameters.
Functions like setup or run or other additional functions follow.
Finally, it defines which function should be executed depending on the parameter.

Use the `doInstall` method for the installation, which downloads the tool based on the mirrors, unpacks it if necessary and puts it in the software folder in the `devonfw-ide` installation:
```
doInstall "-" "«installation-folder»" "«tool-name»" "«tool-version»"
```

=== LICENSE
Find the license for the new tool and add the tool to the table of `Third party components` of the link:LICENSE.asciidoc[LICENSE].
If the license itself does not exist, add it to the end of the file as a new section.

== Settings
The https://github.com/devonfw/ide-settings[ide-settings] repository allows project-specific configurations of the IDE tools.
For your own settings, fork the repository, adjust the configuration and specify the repository URL during installation.
Important notes on configuration and especially configuration files can be found in the link:configuration.asciidoc[configuration].
In the configuration files many link:variables.asciidoc[variables] can be defined.

== Tipps and tricks

=== Bash (Linux's Borne Again Shell)
**For beginners:**

You probably know this black box on Windows (the Command Prompt) that accepts commands like 'dir' that shows the content of the directory you are currently in,
or 'cd' with which you can change the directory you are currently in and many more commands that allow you to interact with your Windows Operating System in a more direct and eventually faster way.  
Now for users of a Linux Distribution there is something similar, but way more powerfull, usually called "Bourne Again Shell", or in short Bash.
This Command Line Interface or "Shell" is what we use most often when implementing something new for our Command-Line-Tool with the name devonfw-ide.  https://www.youtube.com/watch?v=I4EWvMFj37g[Have a look at Bash in 150 Seconds.]
For MacOS you often also use BASH.
That's why it is often enough to implement code for Mac or Linux (at least to some extend as you'll see soon enough) to be able to use it on both Operating Systems.

Let's get to the practical part of the Bash-usage. 

**If you are using Windows**, _then please install WSL so you will be able to use Bash as well. E.g. https://www.youtube.com/watch?v=qYlgUDKKK5A[watch this] guide untill Minute 5:58 for a basic setup on Windows and some command examples._

On the internet are some really good ressources for Bash-beginners.
That's what I now want to make use of by sharing https://www.youtube.com/watch?v=oxuRxtrO2Ag [this robust introduction], going through some of the most important commands and concepts in round about 70 Minutes (you can find a list of the commands introduced by Joe at the videos description).
There are some really usefull commands, that I would have liked to know back then when I started with Bash.
When you have learned the knowledge from this video, then you'll be a big step further on your journey with Bash. 
I think it is really worth watching such a video and to directly play around with those commands on your own Shell simultaneously.
This makes the learning process faster and also way more interesting than simply reading or listenning to such a tutorial.  

When you used to program in some other languages, you for sure know how helpful a google search in combination with the results on stackexchange can be.
If not, then google your question regarding Bash as usual and mostly you'll find a way to get together the code you want. 
Sometimes it needs more patience to get an acceptable result or to find out that a command you already knew includes what you need, if you add the proper tag to its execution.
Take the commands and some of their tags mentioned in https://www.freecodecamp.org/news/linux-command-line-Bash-tutorial/[this rather brief tutorial] as an example. Also definetely try to use the help function from time to time, e.g. type in `ls --help` and you'll see how much more the command `ls` can offer.
On the other side, especialy at the beginning, it is better to get an overview of available tags by googling e.g. 
*ls tags Bash* to get a way prettier overview plus examples regarding a commands tags like https://www.tecmint.com/15-basic-ls-command-examples-in-linux/[here] for `ls`.

**If you have some experience with the Bash or directly want to see more:**

The meaning of a tag or a sign combination (like `$*`, `$#`, or `$()`) can be hard to guess and also less easy to find during a google-search, because google won't directly search for signs.
Then a syntax cheatsheet https://www.pcwdld.com/bash-cheat-sheet[like this] or https://devhints.io/bash[like that one] can spare you some searching time. 
If you don't know what a positional parameter like `$1` is in Bash, then have a look at https://wiki.bash-hackers.org/scripting/posparams[this introduction] and play around with the tools mentioned to get a better understanding of how they work.
It's definitively worth knowing the basics about positional parameters if you want to make some more advanced Bash-scripts.
There are a few more topics that I want to mention to you as you may come across them regularly in Bash-scripting. 
The first one concerns regular expressions, which you will find during various coding situations.
Therefore have a look at https://tldp.org/LDP/abs/html/x17129.html[this rather short introdcution on regex] if you are unfamiliar with the so called regex. 
Another one is about if-statements and square brackets for testing expressions by comparing them in different ways.
Maybe you'll find something new or helpful https://ryanstutorials.net/bash-scripting-tutorial/bash-if-statements.php[here]. 
Finally, to possibly increase your knowledge while scripting bash-files, try out https://www.shellcheck.net/[this spellchecker] that can give you many details on how to improve your code.

**Directly regarding our project:**

In case you want to get your hands dirty with code that is already in use and comes from our ide-project, then you can try out the functions written in our https://github.com/devonfw/ide/blob/master/scripts/src/main/resources/scripts/functions[functions-file]. 
There are also some basic exercises related to our project that are not official yet, but you can ask for if you want to try some of them out to learn and challenge yourself a bit.

== Documentation
https://devonfw.com/website/pages/docs/devonfw-guide_ide.wiki_devonfw-ide.asciidoc.html
