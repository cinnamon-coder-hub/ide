# Getting started as developer contributing to devonfw-ide

## Installation
To start developing the IDE, you must first install the Devon IDE on your computer. The setup depends on the operating system. Use the following guide to set up the IDE:
https://devonfw.com/website/pages/docs/devonfw-guide_ide.wiki_setup.asciidoc.html

## Contribution
To begin, read through the Contribution Guidelines, which you should be sure to follow. https://github.com/devonfw/.github/blob/master/CONTRIBUTING.asciidoc
First steps regarding forks or cloning of repos and creating branches, as well as some git commands:
https://github.com/firstcontributions/first-contributions
Clone the project [IDE](https://github.com/devonfw/ide) at the beginning. For further development and testing, it is recommended to copy the modified scripts into your Devon installation. Alternatively, the scripts can be adapted in the installation folder and then committed to the project.

## Create a new commandlet

### IDE-Mirrors
Many programs have a download link that depends on the operating system. 
For a new tool create a folder in [IDE-Mirror](https://github.com/devonfw/ide-mirrors) with its name containing different files. The file `urls` contains the download urls (one url per line). If a url differs concerning a version, alternative urls can be stored in separate folders. To do this, the folder must be mapped to the version in the `versions` file `[folder name/.]<[version/*]`. The urls can contain placeholders like `${ext}`, which are either passed in the method [`doInstall`](https://github.com/devonfw/ide/blob/a40c9e1bc2c34c7ad7dc832e395f8fd4c8ca31db/scripts/src/main/resources/scripts/functions#L1069) like version, code or major. Furthermore, there are mapping files like `ext-mapping` which replace the placeholders depending on the operating system (`os`/`ext`) or architecture (`arch`). In the files, the operating system/architecture is mapped to the name in the URL according to the format ` [operating system/architecture/*]=[name in URL]`. It is important that the line endings of all files are UNIX `\n`.
If you are unsure what a mirror is read this [page](https://en.wikipedia.org/wiki/Mirror_site).

### Commandlet
Use an existing commandlet like [HELM](https://github.com/devonfw/ide/blob/master/scripts/src/main/resources/scripts/command/helm) as a reference. Create a file with the name of the tool and put it in the folder [scripts/command](https://github.com/devonfw/ide/tree/master/scripts/src/main/resources/scripts/command). The first part of the script contains the autocompletion, which should return the available parameters. Functions like setup or run or other additional functions follow. Finally, it defines which function should be executed depending on the parameter.
Use the `doInstall` method for the installation, which downloads the tool based on the mirrors, unpacks it if necessary and puts it in the software folder in the Devon installation `doInstall "-" "[installation folder]" "[tool name]" "[version]"`.

### LICENSE
Find the license for the new tool and check if the license exists in the [document](https://github.com/devonfw/ide/blob/master/documentation/LICENSE.asciidoc). If the license does not exist, add it to the file and complete the table of contents.

## Settings
The [IDE settings](https://github.com/devonfw/ide-settings) allow project-specific configurations of the IDE tools. For your own settings, fork the repository, adjust the configuration and specify the repository URL during installation. Important notes on configuration and especially configuration files can be found [here](https://devonfw.com/website/pages/docs/devonfw-guide_ide.wiki_configuration.asciidoc.html). In the configuration files many variables can be defined, listed [here](https://github.com/devonfw/ide/blob/master/documentation/variables.asciidoc).

## Tipps and tricks

### Bash (Linux's Borne Again Shell)
**For beginners:**

You probably know this black box on Windows (the Command Prompt) that accepts commands like 'dir' that shows the content of the directory you are currently in,
or 'cd' with which you can change the directory you are currently in and many more commands that allow you to interact with your Windows Operating System in a more direct and eventually faster way.  
Now for users of a Linux Distribution there is something similar, but way more powerfull, usually called "Bourne Again Shell", or in short Bash. This Command Line Interface or "Shell" is what we use most often when implementing something new for our Command-Line-Tool with the name devon-IDE.  
[Have a look at Bash in 150 Seconds](https://www.youtube.com/watch?v=I4EWvMFj37g) 
For MacOS you often also use BASH. That's why it is often enough to implement code for Mac or Linux (at least to some extend as you'll see soon enough) to be able to use it on both Operating Systems.

Let's get to the practical part of the Bash-usage. 

**If you are using Windows**, *then please install WSL so you will be able to use Bash as well. E.g. [watch this](https://www.youtube.com/watch?v=qYlgUDKKK5A) guide untill Minute 5:58 for a basic setup on Windows and some command examples.*

On the internet are some really good ressources for Bash-beginners.
That's what I now want to make use of by sharing [this robust introduction](https://www.youtube.com/watch?v=oxuRxtrO2Ag), going through some of the most important commands and concepts in round about 70 Minutes (you can find a list of the commands introduced by Joe at the videos description). There are some really usefull commands, that I would have liked to know back then when I started with Bash. When you have learned the knowledge from this video, then you'll be a big step further on your journey with Bash. 
I think it is really worth watching such a video and to directly play around with those commands on your own Shell simultaneously.  This makes the learning process faster and also way more interesting than simply reading or listenning to such a tutorial.  

When you used to program in some other languages, you for sure know how helpful a google search in combination with the results on stackexchange can be. If not, then google your question regarding Bash as usual and mostly you'll find a way to get together the code you want. 
Sometimes it needs more patience to get an acceptable result or to find out that a command you already knew includes what you need, if you add the proper tag to its execution. Take the commands and some of their tags mentioned in [this rather brief tutorial](https://www.freecodecamp.org/news/linux-command-line-Bash-tutorial/) as an example. Also definetely try to use the help function from time to time, e.g. type in `ls --help` and you'll see how much more the command `ls` can offer. On the other side, especialy at the beginning, it is better to get an overview of available tags by googling e.g. 
*ls tags Bash* to get a way prettier overview plus examples regarding a commands tags like [here](https://www.tecmint.com/15-basic-ls-command-examples-in-linux/) for `ls`.

**If you have some experience with the Bash or directly want to see more:**

The meaning of a tag or a sign combination (like `$*`, `$#`, or `$()`) can be hard to guess and also less easy to find during a google-search, because google won't directly search for signs. Then a syntax cheatsheet [like this](https://www.pcwdld.com/bash-cheat-sheet) or [like that one](https://devhints.io/bash) can spare you some searching time. 
If you don't know what a positional parameter like `$1` is in Bash, then have a look at  [this introduction](https://wiki.bash-hackers.org/scripting/posparams) and play around with the tools mentioned to get a better understanding of how they work. It's definitively worth knowing the basics about positional parameters if you want to make some more advanced Bash-scripts.
There are a few more topics that I want to mention to you as you may come across them regularly in Bash-scripting. 
The first one concerns regular expressions, which you will find during various coding situations. Therefore have a look at [this rather short introdcution on regex](https://tldp.org/LDP/abs/html/x17129.html)  if you are unfamiliar with the so called regex. 
Another one is about if-statements and  square brackets for testing expressions by comparing them in different ways.  Maybe you'll find something new or helpful [here](https://ryanstutorials.net/bash-scripting-tutorial/bash-if-statements.php). 
Finally, to possibly increase your knowledge while scripting bash-files, try out [this spellchecker](https://www.shellcheck.net/) that can give you many details on how to improve your code.

**Directly regarding our project:**

In case you want to get your hands dirty with code that is already in use and comes from our ide-project, then you can try out the functions written in our [functions-file](https://github.com/devonfw/ide/blob/master/scripts/src/main/resources/scripts/functions). 
There are also some basic exercises related to our project that are not official yet, but you can ask for if you want to try some of them out to learn and challenge yourself a bit.

**Documentation:** https://devonfw.com/website/pages/docs/devonfw-guide_ide.wiki_devonfw-ide.asciidoc.html
